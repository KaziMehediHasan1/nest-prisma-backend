// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Role start===========================================================

// User Role end=============================================================

// File Type start===========================================================
enum FileType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

// File Type end=============================================================

// User Instance start=======================================================

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  phone     String   @unique
  password  String
  name      String
  role      UserRole @default(PLANNER)
  profile   Profile?
  review    Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// User Instance end=========================================================


// User Type start=========================================================

enum UserRole {
  ADMIN
  PLANNER
  SERVICE_PROVIDER
  VENUE_OWNER
}

// User Type end=========================================================


//profile start===================================================
model Profile {
  id       String  @id @default(uuid())
  userId   String  @unique
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  location String
  venue    Venue[]
}
//profile end===================================================


// Venue stat=================================================== 
model Venue {
  id String @id @default(uuid())

  Profile           Profile?      @relation(fields: [profileId], references: [id])
  profileId         String?
  name              String
  city              String
  area              String
  capacity          Int
  type              VenueType
  amenities         Amenities[]
  arrangementsImage FileInstance?
  Reviews           Review[]
  price             Int
  bookingType       BookingType
}

// Venue edn===================================================

// Booking type stat===================================================

enum BookingType {
  INSTANT_BOOKING
  REQUEST_BASED_BOOKING
}

// Booking type end===================================================

// Venue type stat===================================================

enum VenueType {
  HOTEL
  RESTAURANT
  CONFERENCE_HALL
  BANQUET
  RESORT
  OUTDOOR
}

// Venue type end===================================================


// Review stat===================================================

model Review {
  id        String   @id @default(uuid())
  venueId   String
  userId    String // Assuming a user can leave a review
  rating    Int // Rating (e.g., 1-5 stars)
  comment   String? // Optional comment
  createdAt DateTime @default(now())
  Venue     Venue    @relation(fields: [venueId], references: [id])

  User User @relation(fields: [userId], references: [id])
}

// Review end===================================================

model Amenities {
  id      String  @id @default(uuid())
  name    String  @unique
  Venue   Venue?  @relation(fields: [venueId], references: [id])
  venueId String?
}

// User Instance end=========================================================

// File Instance start=======================================================

model FileInstance {
  id        String   @id @default(uuid())
  name      String
  fileId    String   @unique
  path      String
  createdAt DateTime @default(now())
  expiresAt DateTime
  bucket    String
  type      FileType
  Venue     Venue?   @relation(fields: [venueId], references: [id])
  venueId   String?  @unique
}

// File Instance end=========================================================
