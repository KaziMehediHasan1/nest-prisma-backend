// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Role start===========================================================

// User Role end=============================================================

// File Type start===========================================================
enum FileType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

// File Type end=============================================================

// User Instance start=======================================================

model User {
  id         String     @id @default(uuid())
  email      String     @unique
  phone      String     @unique
  password   String
  name       String
  role       UserRole[]
  profile    Profile?
  isVerified Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

// User Instance end=========================================================

// User Type start=========================================================

enum UserRole {
  ADMIN
  PLANNER
  SERVICE_PROVIDER
  VENUE_OWNER
  GUEST
}

// User Type end=========================================================

//

enum ServiceProviderRole {
  PHOTOGRAPHER
  VIDEOGRAPHER
  DJ_BAND
  CATERING
  ENTERTAINER
}

//profile start==========================================================

model Profile {
  id                       String                  @id @default(uuid())
  userId                   String                  @unique
  user                     User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                     String?                  @unique
  gender                   Gender
  imageId                  String?                 @unique // FK for image
  image                    FileInstance?           @relation("ProfileImage", fields: [imageId], references: [id], onDelete: Cascade)
  location                 String?
  eventPreference          EventType[]
  coverPhotoId             String?                 @unique // FK for cover photo
  coverPhoto               FileInstance?           @relation("ProfileCoverPhoto", fields: [coverPhotoId], references: [id], onDelete: Cascade)
  profession               String?
  description              String?
  experience               Int?
  assets                   FileInstance[]
  directMessages           DirectMessage[]
  conversationsInitiated   Conversation[]          @relation("MemberOne")
  conversationsReceived    Conversation[]          @relation("MemberTwo")
  bookingToVenue           Booking[]               @relation("BookedByProfile")
  bookingToServiceProvider Booking[]               @relation("ServiceProviderProfile")
  reviews                  Review[] // 1-to-many relation
  venues                   Venue[] // 1-to-many relation
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  isPro                    Boolean                 @default(false)
  magicLink                MagicLink?
  active                   Boolean                 @default(false)
  enableNotification       Boolean                 @default(true)
  task                     Task[]
  VerificationSubmission   VerificationSubmission? @relation(fields: [verificationSubmissionId], references: [id])
  verificationSubmissionId String?                 @unique
  GroupMessage             GroupMessage?           @relation(fields: [groupMessageId], references: [id])
  groupMessageId           String?
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

//profile end===================================================

//Task manager start ===========================================

model Task {
  id        String   @id @default(uuid())
  name      String
  eventName String
  date      DateTime
  time      DateTime
  done      Boolean  @default(false)
  Profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?
}

//Task manager end ===========================================

//Magic Link Start==============================================

model MagicLink {
  id          String   @id @default(uuid())
  Profile     Profile? @relation(fields: [profileId], references: [id])
  profileId   String?  @unique
  magicLinkId String   @unique
  Booking     Booking? @relation(fields: [bookingId], references: [id])
  bookingId   String?
}

//Magic Link End==============================================

//eventPreferences start================================================
model EventType {
  id      String        @id @default(uuid())
  name    String        @unique
  avatar  FileInstance?
  profile Profile[]
  Booking Booking[]
}

//eventPreferences end================================================

// Venue start===================================================

model Venue {
  id                      String        @id @default(uuid())
  Profile                 Profile?      @relation(fields: [profileId], references: [id])
  profileId               String?
  name                    String
  city                    String
  area                    String
  description             String?
  capacity                Int
  bookedDates             DateTime[] // all booked dates
  type                    VenueType
  cateringDescription     String?
  parkingDescription      String?
  availabilityDescription String?
  extraServiceDescription String?
  amenities               Amenities[]
  arrangementsImage       FileInstance?
  shifts                  Shift[] // 1-to-many relation
  reviews                 Review[]
  price                   Int
  decoration              Decoration?
  bookingType             BookingType
  verified                Boolean       @default(false)
  employees               Employee[]
  bookings                Booking[] // 1-to-many relation
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
}

// venue end

// Verification Submission start ==================================

model VerificationSubmission {
  id           String        @id @default(uuid())
  profile      Profile?
  idCard       FileInstance? @relation("IdCard")
  tradeLicense FileInstance? @relation("TradeLicense")
  payment      Payment?
  bio          String
}

// Verification Submission end ==================================

//employee

model Employee {
  id        String   @id @default(uuid())
  venueId   String
  venue     Venue    @relation(fields: [venueId], references: [id])
  firstName String
  lastName  String
  email     String   @unique
  phone     String   @unique
  role      String
  shifts    Shift[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Shift {
  id        String     @id @default(uuid())
  venueId   String
  venue     Venue      @relation(fields: [venueId], references: [id])
  startTime DateTime
  endTime   DateTime
  duration  Int // Duration in minutes, can be auto-calculated
  shiftName String
  employee  Employee[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// Venue end===================================================

//PAYMENT START

//Booking start =============================================================
model Booking {
  id                String           @id @default(uuid())
  bookedById        String
  bookedBy          Profile          @relation("BookedByProfile", fields: [bookedById], references: [id])
  venueId           String?
  venue             Venue?           @relation(fields: [venueId], references: [id])
  serviceProviderId String?
  serviceProvider   Profile?         @relation("ServiceProviderProfile", fields: [serviceProviderId], references: [id])
  eventName         String
  location          String
  plannerName       String
  selectedDate      DateTime
  startTime         DateTime
  endTime           DateTime
  duration          Int // Duration in minutes, can be auto-calculated
  bookingType       BookingType // Enum: INSTANT_BOOKING, REQUEST_BASED_BOOKING
  guestNumber       Int
  decoration        String? //an string object of decoration
  services          String[] // Array of service names .  comes a string input from the client
  totalCost         Int
  bookingStatus     BookingStatus    @default(REQUESTED) // completed when isEventFinished is true
  totalAmount       Int              @default(0) // Total amount for the booking
  paid              Int              @default(0) // Amount paid  (when the booking is confirmed)
  due               Int              @default(0) // Due amount (remaining amount to be paid)
  payment           Payment[] // 1-to-many relation
  accept            AcceptanceStatus @default(PENDING)
  isEventFinished   Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  EventType         EventType?       @relation(fields: [eventTypeId], references: [id])
  eventTypeId       String?
  magicLink         MagicLink[]
}

enum BookingStatus {
  REQUESTED
  PENDING
  CONFIRMED
  COMPLETED
}

enum AcceptanceStatus {
  ACCEPTED
  PENDING
  DENIED
}

//Booking end =============================================================

model Payment {
  id                       String                  @id @default(uuid())
  bookingId                String // FK for booking @unique
  bookingInfo              Booking?                @relation(fields: [bookingId], references: [id])
  paymentStatus            PaymentStatus // Enum for payment status
  paymentMethod            PaymentMethod // Enum for payment method
  amount                   Int // The amount paid
  transactionId            String? // Optional transaction ID
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  VerificationSubmission   VerificationSubmission? @relation(fields: [verificationSubmissionId], references: [id])
  verificationSubmissionId String?                 @unique
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  BANK_TRANSFER
  CASH
}

//PAYMENT END

// Venue end===================================================

// Decoration start================================================

model Decoration {
  id            String          @id @default(uuid())
  venueId       String          @unique
  venue         Venue?          @relation(fields: [venueId], references: [id])
  tableShapes   TableShape[]
  seatingStyles SeatingStyle[]
  lighting      LightingStyle[]
  flowerColors  FlowerColor[]
  flowerTypes   FlowerType[]
  fragrances    Fragrance[]
}

enum TableShape {
  ROUND
  OVAL
  HALF_MOON
  BANQUET
  SQUARE
  HEXAGONAL
}

enum SeatingStyle {
  BANQUET
  THEATER
  CLASSROOM
  CABARET
  U_SHAPED
  COCKTAIL
}

enum LightingStyle {
  AMBIENT
  SPOTLIGHTING
  FAIRY
  CHANDELIERS
  LED
  NEON
  GOBO
}

enum FlowerColor {
  WHITE
  RED
  YELLOW
  PINK
  PURPLE
  BLUE
  GREEN
  ORANGE
}

enum FlowerType {
  ROSES
  PEONIES
  LILIES
  ORCHIDS
  TULIPS
  SUNFLOWERS
  HYDRANGEAS
}

enum Fragrance {
  FLORAL_SCENTS
  CITRUS_SCENTS
  HERBAL_SCENTS
  OCEANIC_SCENTS
  WOODY_SCENTS
  SPICY
}

//Decoration end================================================

// Booking type stat===================================================

enum BookingType {
  INSTANT_BOOKING
  REQUEST_BASED_BOOKING
}

// Booking type end===================================================

// Venue type stat===================================================

enum VenueType {
  HOTEL
  RESTAURANT
  CONFERENCE_HALL
  BANQUET
  RESORT
  OUTDOOR
}

// Venue type end===================================================

// Review stat===================================================

model Review {
  id        String   @id @default(uuid())
  venueId   String
  rating    Int // Rating (e.g., 1-5 stars)
  comment   String? // Optional comment
  createdAt DateTime @default(now())
  Venue     Venue?   @relation(fields: [venueId], references: [id])
  Profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?
}

// Review end===================================================

//AMENITIES START

model Amenities {
  id      String  @id @default(uuid())
  name    String  @unique
  Venue   Venue[]
  default Boolean @default(false)
}

//AMENITIES END

// User Instance end=========================================================

// File Instance start=======================================================

model FileInstance {
  id                  String                  @id @default(uuid())
  name                String
  fileId              String                  @unique
  path                String
  createdAt           DateTime                @default(now())
  expiresAt           DateTime
  bucket              String
  type                FileType
  Venue               Venue?                  @relation(fields: [venueId], references: [id])
  venueId             String?                 @unique
  imageOfProfile      Profile?                @relation("ProfileImage")
  coverPhotoOfProfile Profile?                @relation("ProfileCoverPhoto")
  EventPreference     EventType?              @relation(fields: [eventPreferenceId], references: [id])
  eventPreferenceId   String?                 @unique
  Profile             Profile?                @relation(fields: [profileId], references: [id])
  profileId           String?
  DirectMessage       DirectMessage?          @relation(fields: [directMessageId], references: [id])
  directMessageId     String?                 @unique
  nationalIdCard      VerificationSubmission? @relation("IdCard", fields: [nationalIdCardId], references: [id])
  nationalIdCardId    String?                 @unique
  tradeLicense        VerificationSubmission? @relation("TradeLicense", fields: [tradeLicenseCardId], references: [id])
  tradeLicenseCardId  String?                 @unique
  GroupMessage        GroupMessage?           @relation(fields: [groupMessageId], references: [id])
  groupMessageId      String?                 @unique
}

// File Instance end=========================================================

// conversation start =======================================================

model Conversation {
  id             String          @id @default(uuid())
  memberOneId    String
  memberOne      Profile         @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwoId    String
  memberTwo      Profile         @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

// conversation start =======================================================

//Group Message Start =======================================================

model GroupMessage {
  id       String          @id @default(uuid())
  name     String
  image    FileInstance?
  message  DirectMessage[]
  profiles Profile[]
}

//Group Message End =======================================================

// Direct Message start =====================================================

model DirectMessage {
  id             String        @id @default(uuid())
  content        String
  file           FileInstance?
  memberId       String
  member         Profile       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  conversationId String
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  deleted        Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  GroupMessage   GroupMessage? @relation(fields: [groupMessageId], references: [id])
  groupMessageId String?

  @@index([memberId])
  @@index([conversationId])
}

// Direct Message end =====================================================
