// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Role start===========================================================

// User Role end=============================================================

// File Type start===========================================================
enum FileType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

// File Type end=============================================================

// User Instance start=======================================================

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  phone      String   @unique
  password   String
  name       String
  role       UserRole @default(PLANNER)
  profile    Profile?
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// User Instance end=========================================================

// User Type start=========================================================

enum UserRole {
  ADMIN
  PLANNER
  SERVICE_PROVIDER
  VENUE_OWNER
  GUEST
}

// User Type end=========================================================

//

enum ServiceProviderRole {
  PHOTOGRAPHER
  VIDEOGRAPHER
  DJ_BAND
  CATERING
  ENTERTAINER
}

//profile start==========================================================

model Profile {
  id              String         @id @default(uuid())
  userId          String         @unique
  user            User           @relation(fields: [userId], references: [id])
  gender          Gender
  imageId         String?        @unique // FK for image
  image           FileInstance?  @relation("ProfileImage", fields: [imageId], references: [id])
  location        String?
  eventPreference EventType[]
  coverPhotoId    String?        @unique // FK for cover photo
  coverPhoto      FileInstance?  @relation("ProfileCoverPhoto", fields: [coverPhotoId], references: [id])
  profession      String?
  description     String?
  experience      Int?
  assets          FileInstance[]

  bookingToVenue           Booking[] @relation("BookedByProfile")
  bookingToServiceProvider Booking[] @relation("ServiceProviderProfile")

  reviews Review[] // 1-to-many relation
  venues  Venue[] // 1-to-many relation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

//profile end===================================================

//eventPreferences start================================================
model EventType {
  id      String        @id @default(uuid())
  name    String        @unique
  avatar  FileInstance?
  profile Profile[]
}

//eventPreferences end================================================

// Venue start===================================================

model Venue {
  id String @id @default(uuid())

  Profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?

  name        String
  city        String
  area        String
  description String?
  capacity    Int
  bookedDates DateTime[] // all booked dates

  type                    VenueType
  cateringDescription     String?
  parkingDescription      String?
  availabilityDescription String?
  extraServiceDescription String?

  amenities         Amenities[]
  arrangementsImage FileInstance?

  shifts Shift[] // 1-to-many relation

  reviews    Review[]
  price      Int
  decoration Decoration?

  bookingType BookingType
  verified    Boolean     @default(false)

  employees Employee[]
  bookings  Booking[] // 1-to-many relation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//employee

model Employee {
  id      String @id @default(uuid())
  venueId String
  venue   Venue  @relation(fields: [venueId], references: [id])

  firstName String
  lastName  String
  email     String  @unique
  phone     String  @unique
  role      String
  shifts    Shift[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Shift {
  id        String   @id @default(uuid())
  venueId   String
  venue     Venue    @relation(fields: [venueId], references: [id])
  startTime DateTime
  endTime   DateTime
  duration  Int // Duration in minutes, can be auto-calculated
  shiftName String

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Venue end===================================================

//PAYMENT START

model Booking {
  id         String  @id @default(uuid())
  bookedById String
  bookedBy   Profile @relation("BookedByProfile", fields: [bookedById], references: [id])

  //which  venue is booked
  venueId   String?
  venue     Venue?  @relation(fields: [venueId], references: [id])
  venueName String

  //which service provider is booked
  serviceProviderId String?
  serviceProvider   Profile? @relation("ServiceProviderProfile", fields: [serviceProviderId], references: [id])

  eventName   String
  location    String
  plannerName String

  selectedDate DateTime
  startTime    DateTime
  endTime      DateTime
  duration     Int // Duration in minutes, can be auto-calculated
  eventType    String
  bookingType  BookingType // Enum: INSTANT_BOOKING, REQUEST_BASED_BOOKING

  guestNumber Int
  decoration  String? //an string object of decoration

  services      String[] // Array of service names .  comes a string input from the client
  totalCost     Int
  bookingStatus BookingStatus @default(REQUESTED) // completed when isEventFinished is true

  totalAmount Int? // Total amount for the booking

  paid Int // Amount paid  (when the booking is confirmed)
  due  Int // Due amount (remaining amount to be paid)

  payment Payment[] // 1-to-many relation


  accept          AcceptanceStatus
  isEventFinished Boolean          @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum BookingStatus {
  REQUESTED
  PENDING
  CONFIRMED
  COMPLETED
}

enum AcceptanceStatus {
  ACCEPTED
  DENIED
}

model Payment {
  id String @id @default(uuid())

  bookingId   String    // FK for booking @unique
  bookingInfo Booking? @relation(fields: [bookingId], references: [id])

  paymentStatus PaymentStatus // Enum for payment status
  paymentMethod PaymentMethod // Enum for payment method

  amount        Int // The amount paid
  transactionId String? // Optional transaction ID

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  BANK_TRANSFER
  CASH
}

//PAYMENT END

// Venue end===================================================

// Decoration start================================================

model Decoration {
  id            String          @id @default(uuid())
  venueId       String          @unique
  venue         Venue?          @relation(fields: [venueId], references: [id])
  tableShapes   TableShape[]
  seatingStyles SeatingStyle[]
  lighting      LightingStyle[]
  flowerColors  FlowerColor[]
  flowerTypes   FlowerType[]
  fragrances    Fragrance[]
}

enum TableShape {
  ROUND
  OVAL
  HALF_MOON
  BANQUET
  SQUARE
  HEXAGONAL
}

enum SeatingStyle {
  BANQUET
  THEATER
  CLASSROOM
  CABARET
  U_SHAPED
  COCKTAIL
}

enum LightingStyle {
  AMBIENT
  SPOTLIGHTING
  FAIRY
  CHANDELIERS
  LED
  NEON
  GOBO
}

enum FlowerColor {
  WHITE
  RED
  YELLOW
  PINK
  PURPLE
  BLUE
  GREEN
  ORANGE
}

enum FlowerType {
  ROSES
  PEONIES
  LILIES
  ORCHIDS
  TULIPS
  SUNFLOWERS
  HYDRANGEAS
}

enum Fragrance {
  FLORAL_SCENTS
  CITRUS_SCENTS
  HERBAL_SCENTS
  OCEANIC_SCENTS
  WOODY_SCENTS
  SPICY
}

//Decoration end================================================

// Booking type stat===================================================

enum BookingType {
  INSTANT_BOOKING
  REQUEST_BASED_BOOKING
}

// Booking type end===================================================

// Venue type stat===================================================

enum VenueType {
  HOTEL
  RESTAURANT
  CONFERENCE_HALL
  BANQUET
  RESORT
  OUTDOOR
}

// Venue type end===================================================

// Review stat===================================================

model Review {
  id        String   @id @default(uuid())
  venueId   String
  rating    Int // Rating (e.g., 1-5 stars)
  comment   String? // Optional comment
  createdAt DateTime @default(now())
  Venue     Venue    @relation(fields: [venueId], references: [id])
  Profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?
}

// Review end===================================================

//AMENITIES START

model Amenities {
  id      String  @id @default(uuid())
  name    String  @unique
  Venue   Venue[]
  default Boolean @default(false)
}

//AMENITIES END

// User Instance end=========================================================

// File Instance start=======================================================

model FileInstance {
  id                  String     @id @default(uuid())
  name                String
  fileId              String     @unique
  path                String
  createdAt           DateTime   @default(now())
  expiresAt           DateTime
  bucket              String
  type                FileType
  Venue               Venue?     @relation(fields: [venueId], references: [id])
  venueId             String?    @unique
  imageOfProfile      Profile?   @relation("ProfileImage")
  coverPhotoOfProfile Profile?   @relation("ProfileCoverPhoto")
  EventPreference     EventType? @relation(fields: [eventPreferenceId], references: [id])
  eventPreferenceId   String?    @unique
  Profile             Profile?   @relation(fields: [profileId], references: [id])
  profileId           String?
}

// File Instance end=========================================================

//Booking start =============================================================

//Booking end =============================================================

//Event Type start =============================================================

//Event Type end =============================================================
