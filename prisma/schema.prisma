// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Role start===========================================================

// User Role end=============================================================

// File Type start===========================================================
enum FileType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

// File Type end=============================================================

// User Instance start=======================================================

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  phone      String   @unique
  password   String
  name       String
  role       UserRole @default(PLANNER)
  profile    Profile?
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// User Instance end=========================================================

// User Type start=========================================================

enum UserRole {
  ADMIN
  PLANNER
  SERVICE_PROVIDER
  VENUE_OWNER
  GUEST
}

// User Type end=========================================================

//

enum ServiceProviderRole {
  PHOTOGRAPHER
  VIDEOGRAPHER
  DJ_BAND
  catering
}

//profile start===================================================
model Profile {
  id                  String               @id @default(uuid())
  userId              String               @unique
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  location            String
  venue               Venue[]
  gender              Gender
  imageId             String?              @unique // FK for image
  image               FileInstance?        @relation("ProfileImage", fields: [imageId], references: [id])
  coverPhotoId        String?              @unique // FK for cover photo
  coverPhoto          FileInstance?        @relation("ProfileCoverPhoto", fields: [coverPhotoId], references: [id])
  reviews             Review[]
  fileInstanceId      String?
  eventPreferences    EventPreference[]
  servicePRoviderRole ServiceProviderRole?
  yearOfExperience    Int?
  description         String?
  booking             Booking[]
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

//profile end===================================================

//eventPreferences start================================================
model EventPreference {
  id      String        @id @default(uuid())
  name    String        @unique
  avatar  FileInstance?
  Profile Profile[]
}

//eventPreferences end================================================

// Venue stat=================================================== 
model Venue {
  id String @id @default(uuid())

  Profile           Profile?      @relation(fields: [profileId], references: [id])
  profileId         String?
  name              String
  city              String
  area              String
  capacity          Int
  type              VenueType
  amenities         Amenities[]
  arrangementsImage FileInstance?
  Reviews           Review[]
  catering          String?
  parking           String?
  availability      String?
  extraServices     String?
  price             Int
  bookingType       BookingType
  Decoration        Decoration?   @relation(fields: [decorationId], references: [id], onDelete: Cascade)
  decorationId      String?       @unique
  booking           Booking[]
}

// Venue end===================================================

// Decoration start================================================

model Decoration {
  id            String          @id @default(uuid())
  venue         Venue?
  tableShapes   TableShape[]
  seatingStyles SeatingStyle[]
  lighting      LightingStyle[]
  flowerColors  FlowerColor[]
  flowerTypes   FlowerType[]
  fragrances    Fragrance[]
}

enum TableShape {
  ROUND
  OVAL
  HALF_MOON
  BANQUET
  SQUARE
  HEXAGONAL
}

enum SeatingStyle {
  BANQUET
  THEATER
  CLASSROOM
  CABARET
  U_SHAPED
  COCKTAIL
}

enum LightingStyle {
  AMBIENT
  SPOTLIGHTING
  FAIRY
  CHANDELIERS
  LED
  NEON
  GOBO
}

enum FlowerColor {
  WHITE
  RED
  YELLOW
  PINK
  PURPLE
  BLUE
  GREEN
  ORANGE
}

enum FlowerType {
  ROSES
  PEONIES
  LILIES
  ORCHIDS
  TULIPS
  SUNFLOWERS
  HYDRANGEAS
}

enum Fragrance {
  FLORAL_SCENTS
  CITRUS_SCENTS
  HERBAL_SCENTS
  OCEANIC_SCENTS
  WOODY_SCENTS
  SPICY
}

//Decoration end================================================

// Booking type stat===================================================

enum BookingType {
  INSTANT_BOOKING
  REQUEST_BASED_BOOKING
}

// Booking type end===================================================

// Venue type stat===================================================

enum VenueType {
  HOTEL
  RESTAURANT
  CONFERENCE_HALL
  BANQUET
  RESORT
  OUTDOOR
}

// Venue type end===================================================

// Review stat===================================================

model Review {
  id        String   @id @default(uuid())
  venueId   String
  rating    Int // Rating (e.g., 1-5 stars)
  comment   String? // Optional comment
  createdAt DateTime @default(now())
  Venue     Venue    @relation(fields: [venueId], references: [id])
  Profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?
}

// Review end===================================================

model Amenities {
  id      String  @id @default(uuid())
  name    String  @unique
  Venue   Venue?  @relation(fields: [venueId], references: [id])
  venueId String?
  default Boolean @default(false)
}

// User Instance end=========================================================

// File Instance start=======================================================

model FileInstance {
  id                  String           @id @default(uuid())
  name                String
  fileId              String           @unique
  path                String
  createdAt           DateTime         @default(now())
  expiresAt           DateTime
  bucket              String
  type                FileType
  Venue               Venue?           @relation(fields: [venueId], references: [id])
  venueId             String?          @unique
  imageOfProfile      Profile?         @relation("ProfileImage")
  coverPhotoOfProfile Profile?         @relation("ProfileCoverPhoto")
  EventPreference     EventPreference? @relation(fields: [eventPreferenceId], references: [id])
  eventPreferenceId   String?          @unique
}

// File Instance end=========================================================

//Booking start =============================================================

model Booking {
  id        String   @id @default(uuid())
  eventName String
  Profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?
  booking   DateTime
  startTime String
  endTime   String
  Venue     Venue?   @relation(fields: [venueId], references: [id])
  venueId   String?
  guestNumber String
  eventType EventType @default(OTHERS)
}

//Booking end =============================================================

//Event Type start =============================================================

enum EventType {
  BIRTHDAY_PARTY
  WEDDING
  CORPORATE_EVENT
  BACHELOR_PARTY
  ANNIVERSARY
  OTHERS
}

//Event Type end =============================================================
